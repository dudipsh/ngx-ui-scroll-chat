# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Account {
  companyName: String
  user: User
}

type Author {
  firstName: String
  lastName: String
}

type Branch {
  id: Float!
  name: String!
}

type Channel {
  _id: String!
  accountId: String!
  channelAlias: String
  channelDescription: String
  channelName: String
  channelType: String!
  chatUsersIds: [String!]!
  creatorId: String
  error: String
  isPrivate: Boolean!
  settings: ChannelSettings!
  unreadMessages: Int
  unreadUsers: [String!]
}

type ChannelSettings {
  _id: String!
  channelId: String!
  hideChannel: Boolean!
  settingsOwnerId: String!
}

type ChatUsers {
  _id: String!
  profileInfo: ProfileInfo!
}

type Contact {
  homeEmail: String!
  homePhone: Int!
  id: Int!
  mobilePhone: Int!
  workEmail: String!
  workExt: Int!
  workPhone: Int!
}

type Employee {
  account: Account!
  branch: Branch!
  employeeChatId: String!
  id: Int!
  jobInformationDate: DateTime!
  profile: Profile!
  reportingTo: Employee!
  roles: Role!
  token: String!
}

type Message {
  _id: String!
  accountId: String!
  channelId: String!
  senderId: String!
  subType: String!
  text: String!
  token: String!
  ts: String!
  type: String!
  updatedAt: String
  user: User!
}

type MessageChanged {
  actionType: String!
  channelId: String!
  message: Message!
}

type MessageChangedType {
  actionType: String!
  channelId: String!
  message: Message!
}

type Mutation {
  activeAccount(email: String!): ServerResult!
  changePassword(data: ChangePassword!): Employee!
  createBranch: Branch!
  createChannel(createChanel: CreateChannelDto!): Channel!
  createEmployee(employeeData: NewEmployeeInput!, userData: NewUserInput!): Employee!
  createMessageDivider(createMessage: CreateMessageTdo!): Message!
  createNewAccount(data: CreateAccountInput!): User!
  deleteAccount(id: Float!): Account!
  deleteMessage(message: MessageInput!): Message!
  getPermissionFieldsFromArray(data: CreateRoleInput!): TestType!
  inviteToChannel(inviteToChannel: InviteToChannel!): Channel!
  joinToChannel(channelId: String!): Channel!
  sendMessage(createMessage: CreateMessageTdo!): Message!
  setDefaultRoles: TestType!
  updateChannelSettings(updateSettings: CreateChannelSettingsType!): ChannelSettings!
  updateEmployeeStatus(id: Float!, status: Float!): Employee!
  updateMessage(message: MessageInput!): Message!
  updateReadMessage(messageId: String!): ServerResult!
  updateReadMessageByChannelId(channelId: String!): ServerResult!
  updateReadMessageByMessageId(messageId: String!): ServerResult!
}

type Ping {
  id: Float!
}

type Profile {
  contact: Contact!
  id: Int!
  profileInfo: ProfileInfo!
}

type ProfileInfo {
  addressLine1: String!
  birthDate: DateTime
  gender: Float
  id: Int!
  legalName: String!
  maritalStatus: String
  preferredName: String!
  profileImage: String
}

type Query {
  forgotPassword(email: String!): ServerResult!
  getHello: Author!
  login(data: AuthLoginInput!): Employee!
  ping(id: Float!): Ping!
  readAccessibleChannel: [Channel!]!
  readBranches: [Branch!]!
  readChannelsSettings: [ChannelSettings!]!
  readChatUsers: [ChatUsers!]!
  readEmployee(id: String!): Employee!
  readEmployees: [Employee!]!
  readMessageByChannel(channelId: String!): [Message!]!
  readMessageByChannelByDate(channelId: String!, first: Float!, skip: Float!): [Message!]!
  readMyChannels: [Channel!]!
  readUnreadMessages: [UnreadMessage!]!
  test123: TestType!
  updateReadMessagesByChannelId(channelId: String!): [Message!]!
  whoAMI: Employee!
}

type Role {
  applyOnOthers: Boolean!
  description: String!
  destroy: [String!]!
  id: Int!
  name: String!
  read: [String!]!
  roleLevel: Int!
  update: [String!]!
}

type ServerResult {
  result: String!
  status: Float!
}

type Subscription {
  channelCreated(chatUserId: String!): Channel!
  pong: Ping!
  readMessageSub(readMessagesSub: ReadMessagesSub!): MessageChangedType!
  readUnreadMessageCounterInChannelsSub: [UnreadMessageList!]!
}

type TestType {
  name: String!
  tags: String!
}

type UnreadMessage {
  _id: String!
  channelId: String!
  count: Float!
  message: Message!
  ts: String!
  type: String!
}

type UnreadMessageList {
  _id: String!
  count: Int!
}

type User {
  accountId: Float!
  branch: Branch!
  chatAccountId: String!
  chatUserId: String!
  email: String!
  id: Float!
  legalName: String!
  role: Float!
  token: String!
  verified: Boolean!
}

input AuthLoginInput {
  email: String!
  password: String!
}

input ChangePassword {
  password: String!
  token: String!
}

input ChannelSettingsInput {
  _id: String!
  channelId: String!
  hideChannel: Boolean!
  settingsOwnerId: String!
}

input CreateAccountInput {
  branchName: String = ""
  companyName: String!
  email: String!
  employeeId: Float
  id: Float
  legalName: String!
  numberOfEmployees: Float!
  password: String
  phoneNumber: Float!
}

input CreateChannelDto {
  _id: String
  channelAlias: String!
  channelDescription: String
  channelName: String!
  channelType: String = "CHANNEL"
  chatUsersIds: [String!] = []
  creatorId: String
  inviteOptions: InviteToChannelIdsType!
  isPrivate: Boolean = false
  isReadOnly: Boolean = false
  settings: ChannelSettingsInput
}

input CreateChannelSettingsType {
  channelId: String!
  hideChannel: Boolean = false
}

input CreateMessageTdo {
  _id: String
  channelId: String!
  subType: String
  text: String!
  ts: String
  type: String = "message"
}

input CreateRoleInput {
  applyOnOthers: Boolean
  destroy: [Float!]
  name: String
  read: [Float!]
  roleLevel: Float
  update: [Float!]
}

input InviteToChannel {
  channelId: String!
  chatUsersIds: [String!]!
}

input InviteToChannelIdsType {
  branchesIds: [Int!]!
  departmentIds: [Int!]!
  employeeIds: [Int!]!
}

input MessageInput {
  _id: String!
  channelId: String!
  senderId: String!
  subType: String!
  text: String!
  ts: String!
  type: String!
}

input NewEmployeeInput {
  branchId: Int
  email: String
  gender: Float!
  jobTitle: String
  legalName: String!
  reportingToId: Int
  roles: [Int!]
  ssn: Int
}

input NewUserInput {
  email: String!
  password: String!
}

input NewUserMongo {
  accountId: Float!
  chatAccountId: String!
  email: String!
  employeeId: Float!
  legalName: String!
  password: String
}

input ReadMessagesSub {
  channelId: String!
  channels: [String!] = []
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime
